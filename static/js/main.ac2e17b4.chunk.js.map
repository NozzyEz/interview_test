{"version":3,"sources":["fonts/FjallaOne-Regular.ttf","components/GlobalStyles.tsx","components/Header.tsx","components/Form.tsx","components/InputSampler.tsx","components/Display.tsx","App.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","FjellaOne","StyledHeader","styled","div","Line","Header","InputForm","ObjInputForm","ObjAddBtn","button","SamplerInput","input","Selector","select","ObjSelector","Form","code","setCode","line","useState","type","setType","subType","setSubType","value","setValue","props","setProps","typeChangeHandler","e","prop","i","findIndex","el","key","newCode","newCodeElement","propIndex","undefined","newProps","console","log","target","subtype","addPropsToObjHandler","subTypeChangeHandler","valueChangeHandler","name","tempProps","newProp","uuid","objectIndex","push","deleteElemHandler","splice","htmlFor","placeholder","onChange","defaultValue","onClick","map","Sampler","InputSampler","updatedCode","StyledDisplay","CodeBox","ObjectCode","Display","className","initialCodeElem","Container","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac2e17b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/FjallaOne-Regular.c674a102.ttf\";","import {createGlobalStyle} from 'styled-components';\nimport FjellaOne from '../fonts/FjallaOne-Regular.ttf';\n\nconst GlobalStyles = createGlobalStyle`\n@font-face {\n  font-family: 'FjellaOne';\n  src: url(${FjellaOne});\n}\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: none;\n  }\n\n  html {\n    font-size: 62.5%\n  }\n\n  body {\n    background-color: #2f2f2f;\n    color: #eaeaea;\n    font-family: 'FjellaOne';\n  }\n\n  h1 {\n    font-size: 3rem;\n  }\n  h2 {\n    font-size: 3.5rem;\n  }\n  h3 {\n    font-size: 2.5rem;\n  }\n  h4 {\n    font-size: 2.3rem;\n  }\n  p {\n    font-size: 1.8rem;\n  }\n  code {\n    font-size: 1.5rem;\n    color: #000;\n    display:block\n  }\n  button {\n    padding: 1.2rem 3rem;\n    margin: 0rem 0.5rem;\n    font-weight: bolder;\n    border: none;\n    background-color: #e06c2e;\n    transition: all 0.3s ease-in-out;\n    color: #fff;\n    &:hover {\n    color: #e06c2e;\n    background-color: #fff;\n    }\n    &:focus {\n      outline: #fff 1px solid\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import styled from 'styled-components';\n\nconst Header: React.FC<{}> = () => {\n  return (\n    <StyledHeader>\n      <h1>TypeScript Type Generator</h1>\n      <Line />\n    </StyledHeader>\n  );\n};\n\nconst StyledHeader = styled.div`\n  min-height: 10vh;\n  /* width: vw; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Line = styled.div`\n  height: 0.5rem;\n  width: 35rem;\n  background-color: #e06c2e;\n`;\n\nexport default Header;\n","import {useState} from 'react';\nimport styled from 'styled-components';\nimport {v4 as uuid} from 'uuid';\n\ninterface Props {\n  code: Array<codeElem>;\n  line?: codeElem;\n\n  setCode: Function;\n}\n\ninterface codeElem {\n  name: string;\n  type: string | undefined;\n  subtype?: string;\n  key: string;\n  props?: Array<codeElem> | undefined;\n}\n\nconst Form: React.FC<Props> = ({code, setCode, line}) => {\n  const [type, setType] = useState<string>('number');\n  const [subType, setSubType] = useState<string | undefined>('number');\n  const [value, setValue] = useState<string>('');\n  const [props, setProps] = useState<Array<codeElem> | undefined>([]);\n\n  //* sets the type of the code element or the prop selected\n  function typeChangeHandler(e: any, prop?: codeElem) {\n    // Find index of line\n    const i = code.findIndex(el => el.key === line?.key);\n\n    // make a copy of code\n    let newCode = [...code];\n    // Create a new code element from a copy based on the index\n    const newCodeElement = newCode[i];\n\n    let propIndex: number | undefined = undefined;\n    if (prop) {\n      // console.log(prop.key);\n      // decontruct props\n      let newProps = props ? [...props] : [];\n      // find the prop with matching key\n      propIndex = newProps.findIndex(el => el.key === prop.key);\n      console.log(propIndex);\n\n      // change it's type\n      newProps[propIndex].type = e.target.value;\n      // put the clone back in props\n      setProps(newProps);\n      newCodeElement.props = newProps;\n      console.log('prop passed');\n      console.log(newCodeElement);\n      console.log(propIndex);\n      newCodeElement.props[propIndex].type = e.target.value;\n      // update code state\n    } else {\n      setType(e.target.value);\n      newCodeElement.type = e.target.value;\n      if (e.target.value === 'Array') {\n        setSubType('number');\n        newCodeElement.subtype = 'number';\n        setProps(undefined);\n        delete newCodeElement.props;\n      } else if (e.target.value === 'object') {\n        addPropsToObjHandler();\n        setSubType(undefined);\n        delete newCodeElement.subtype;\n      } else {\n        setSubType(undefined);\n        setProps(undefined);\n        // newCodeElement.subtype = undefined\n        delete newCodeElement.subtype;\n        delete newCodeElement.props;\n      }\n    }\n\n    // Add it back to the array\n    console.log('before saving state');\n    console.log(newCodeElement);\n    newCode[i] = newCodeElement;\n    // Update state with the new array\n    setCode(newCode);\n  }\n\n  //* sets the subtype selected for Array type\n  function subTypeChangeHandler(e: any, prop?: codeElem) {\n    let newCode = [...code];\n    const i = code.findIndex(el => el.key === line?.key);\n    const newCodeElement = newCode[i];\n\n    let propIndex: number | undefined = undefined;\n    if (prop) {\n      // console.log(prop.key);\n      // decontruct props\n      let newProps = props ? [...props] : [];\n      // find the prop with matching key\n      propIndex = newProps.findIndex(el => el.key === prop.key);\n      console.log(propIndex);\n\n      // change it's type\n      newProps[propIndex].subtype = e.target.value;\n      // put the clone back in props\n      setProps(newProps);\n      newCodeElement.props = newProps;\n      console.log('prop passed');\n      console.log(newCodeElement);\n      console.log(propIndex);\n      newCodeElement.props[propIndex].subtype = e.target.value;\n    } else {\n      setSubType(e.target.value);\n      console.log(i);\n      newCodeElement.subtype = e.target.value;\n    }\n    newCode[i] = newCodeElement;\n    setCode(newCode);\n  }\n\n  //* sets the name selected on the code element or prop\n  function valueChangeHandler(e: any, prop?: codeElem) {\n    let newCode = [...code];\n    const i = code.findIndex(el => el.key === line?.key);\n    const newCodeElement = newCode[i];\n    let propIndex: number | undefined = undefined;\n    if (prop) {\n      let newProps = props ? [...props] : [];\n\n      propIndex = newProps.findIndex(el => el.key === prop.key);\n      console.log(propIndex);\n\n      newProps[propIndex].name = e.target.value;\n      // put the clone back in props\n      setProps(newProps);\n      newCodeElement.props = newProps;\n      console.log('prop passed');\n      console.log(newCodeElement);\n      console.log(propIndex);\n      newCodeElement.props[propIndex].name = e.target.value;\n    } else {\n      setValue(e.target.value);\n      newCodeElement.name = e.target.value;\n    }\n    // // console.log('setValue');\n    console.log(i);\n    newCode[i] = newCodeElement;\n    setCode(newCode);\n  }\n\n  // TODO create addPropsToObjHandler\n  function addPropsToObjHandler() {\n    console.log('addPropsToObjHandler() initiated');\n\n    // initialize and clone props if they exist\n    let tempProps: Array<codeElem> = [];\n    if (line?.props) tempProps = line.props;\n\n    const newProp: codeElem = {\n      name: '',\n      type: 'number',\n      key: uuid(),\n    };\n\n    // clone code\n    let newCode = [...code];\n    // find index of object\n    const objectIndex = newCode.findIndex(el => el.key === line?.key);\n    // push newProp onto tempProps\n    tempProps.push(newProp);\n    setProps(tempProps);\n    // overwrite object props with tempProps\n    newCode[objectIndex].props = tempProps;\n\n    // push clone to state\n    setCode(newCode);\n  }\n\n  //* delete code element or prop\n  function deleteElemHandler(e: any, prop?: codeElem) {\n    let newCode = [...code];\n    const i = code.findIndex(el => el.key === line?.key);\n    let propIndex: number | undefined = undefined;\n\n    if (prop) {\n      let newProps = newCode[i].props;\n      propIndex = newProps?.findIndex(el => el.key === prop.key);\n      console.log('deleting prop');\n      console.log(propIndex);\n      if (propIndex) newProps?.splice(propIndex, 1);\n      newCode[i].props = newProps;\n    } else {\n      console.log(i);\n      newCode.splice(i, 1);\n    }\n    setCode(newCode);\n  }\n\n  return (\n    <InputForm>\n      <label htmlFor=\"\">Name:</label>\n      <SamplerInput placeholder=\"value\" onChange={valueChangeHandler} value={value} />\n      <label htmlFor=\"\">Type:</label>\n      <Selector defaultValue={type} onChange={typeChangeHandler}>\n        <option value=\"number\">Number</option>\n        <option value=\"string\">String</option>\n        <option value=\"Array\">Array</option>\n        <option value=\"object\">Object</option>\n      </Selector>\n      {type === 'Array' && (\n        <>\n          <label htmlFor=\"\">Contains:</label>\n          <Selector defaultValue={subType} onChange={subTypeChangeHandler}>\n            <option value=\"number\">Number</option>\n            <option value=\"string\">String</option>\n            <option value=\"Array\">Array</option>\n            <option value=\"object\">Object</option>\n          </Selector>\n        </>\n      )}\n      {code.findIndex(el => el.key === line?.key) !== 0 && (\n        <button onClick={deleteElemHandler}>Delete</button>\n      )}\n      {type === 'object' &&\n        props &&\n        props.map(prop => (\n          <ObjInputForm key={prop.key}>\n            <label htmlFor=\"\">Name:</label>\n            <SamplerInput\n              placeholder=\"value\"\n              onChange={e => valueChangeHandler(e, prop)}\n              value={prop.name}\n            />\n            <label htmlFor=\"\">Type:</label>\n            <ObjSelector defaultValue={prop.type} onChange={e => typeChangeHandler(e, prop)}>\n              <option value=\"number\">Number</option>\n              <option value=\"string\">String</option>\n              <option value=\"Array\">Array</option>\n              <option value=\"object\">Object</option>\n            </ObjSelector>\n            {prop.type === 'Array' && (\n              <>\n                <label htmlFor=\"\">Contains:</label>\n                <Selector defaultValue={subType} onChange={e => subTypeChangeHandler(e, prop)}>\n                  <option value=\"number\">Number</option>\n                  <option value=\"string\">String</option>\n                  <option value=\"Array\">Array</option>\n                  <option value=\"object\">Object</option>\n                </Selector>\n              </>\n            )}\n            <button onClick={e => deleteElemHandler(e, prop)}>Delete</button>\n          </ObjInputForm>\n        ))}\n      {line?.props && <ObjAddBtn onClick={addPropsToObjHandler}>Add new</ObjAddBtn>}\n    </InputForm>\n  );\n};\n\nconst InputForm = styled.div`\n  label {\n    font-size: 1.4rem;\n    margin: 0.5rem;\n  }\n`;\nconst ObjInputForm = styled.div`\n  margin-left: 5rem;\n  label {\n    font-size: 1.4rem;\n    margin: 0.5rem;\n  }\n`;\n\nconst ObjAddBtn = styled.button`\n  margin-left: 5rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst SamplerInput = styled.input`\n  width: 25rem;\n  padding: 1rem 0rem;\n  margin: 1rem 0rem;\n`;\nconst Selector = styled.select`\n  margin: 0rem 1rem;\n  width: 10rem;\n  padding: 1rem 0rem;\n`;\nconst ObjSelector = styled.select`\n  margin: 0rem 1rem;\n  width: 10rem;\n  padding: 1rem 0rem;\n`;\n\nexport default Form;\n","import {v4 as uuid} from 'uuid';\nimport styled from 'styled-components';\nimport Form from './Form';\n\ninterface Props {\n  code: Array<codeElem>;\n  line?: codeElem;\n\n  setCode: Function;\n}\n\ninterface codeElem {\n  name: string;\n  type: string | undefined;\n  subtype?: string;\n  key: string;\n  props?: Array<codeElem> | undefined;\n}\n\nconst InputSampler: React.FC<Props> = ({code, setCode}) => {\n  //* adding a new code element to state\n  function addCodeElemHandler() {\n    console.log('addCodeHandler() initiated');\n    let updatedCode = [];\n    const newCode: codeElem = {\n      name: '',\n      type: 'number',\n      subtype: undefined,\n      key: uuid(),\n    };\n\n    if (newCode.name !== undefined && newCode.type !== undefined) {\n      console.log('pair has both a name and a type, pushing to code array');\n      updatedCode = code !== undefined ? [...code, newCode] : [newCode];\n      setCode(updatedCode);\n    }\n    // console.log(code);\n  }\n  return (\n    <Sampler>\n      <h3>Select input type and name. Then you will see the magic happen</h3>\n      {code !== undefined &&\n        code.map(line => <Form code={code} setCode={setCode} line={line} key={line.key} />)}\n      <button onClick={addCodeElemHandler}>Add new</button>\n    </Sampler>\n  );\n};\n\nconst Sampler = styled.div`\n  width: 80rem;\n  min-height: 80rem;\n  border-radius: 2rem;\n  border: 1px solid #eaeaea;\n  margin-right: 2rem;\n  padding: 5rem;\n  h3 {\n    margin-bottom: 2rem;\n  }\n`;\n\nexport default InputSampler;\n","import styled from 'styled-components';\n\ninterface Props {\n  code: Array<codeElem> | undefined;\n}\n\ninterface codeElem {\n  name: string;\n  type: string;\n  subtype?: string;\n  key: string;\n  props?: Array<codeElem> | undefined;\n}\n\nconst Display: React.FC<Props> = ({code}) => {\n  // console.log(code);\n  return (\n    <StyledDisplay>\n      <h3>Code goes here</h3>\n      <CodeBox>\n        {!code && <p>But not before there is code to display</p>}\n        {code !== undefined &&\n          code.map(line => (\n            <div className=\"line-container\" key={line.key}>\n              <code>\n                {line.type !== 'Array' && line.type !== 'object' && `${line.name}: ${line.type}`}\n              </code>\n              <code>{line.type === 'Array' && `${line.name}: ${line.type}<${line.subtype}>`}</code>\n\n              {line.type === 'object' && (\n                <>\n                  <code>type {line.name} = &#10100;</code>\n                  {line.props?.map(prop => (\n                    <ObjectCode>\n                      {prop.type === 'Array' && `${prop.name}: ${prop.type}<${prop.subtype}>`}\n                      {prop.type === 'object' && `type ${prop.name} = ${prop.type}{}`}\n                      {prop.type !== 'Array' &&\n                        prop.type !== 'object' &&\n                        `${prop.name}: ${prop.type}`}\n                    </ObjectCode>\n                  ))}\n                  <code>&#10101;</code>\n                </>\n              )}\n            </div>\n          ))}\n      </CodeBox>\n    </StyledDisplay>\n  );\n};\n\nconst StyledDisplay = styled.div`\n  max-width: 70rem;\n  flex-grow: 1;\n  min-height: 80rem;\n  border-radius: 2rem;\n  border: 1px solid #eaeaea;\n  h3 {\n    padding: 2rem;\n  }\n`;\nconst CodeBox = styled.div`\n  margin: 0rem 3.5rem;\n  min-height: 50rem;\n  padding: 3rem 5rem;\n  background-color: #7f7f7f;\n  border: 2px solid #e06c2e;\n  border-radius: 1rem;\n`;\n\nconst ObjectCode = styled.code`\n  margin-left: 2rem;\n`;\n\nexport default Display;\n","import {useState} from 'react';\nimport {v4 as uuid} from 'uuid';\n\nimport styled from 'styled-components';\nimport GlobalStyles from './components/GlobalStyles';\n\nimport Header from './components/Header';\nimport InputSampler from './components/InputSampler';\nimport Display from './components/Display';\n\ninterface codeElem {\n  name: string;\n  type: string;\n  subtype?: string;\n  key: string;\n  props?: Array<codeElem> | undefined;\n}\n\nlet initialCodeElem = {\n  name: '',\n  type: 'number',\n  key: uuid(),\n};\n\nfunction App() {\n  const [code, setCode] = useState<Array<codeElem>>([initialCodeElem]);\n\n  return (\n    <div className=\"app\">\n      <GlobalStyles />\n      <Header />\n      <Container>\n        <InputSampler code={code} setCode={setCode} />\n        <Display code={code} />\n      </Container>\n    </div>\n  );\n}\n\nconst Container = styled.div`\n  min-height: 50vh;\n  margin: 2rem 5rem;\n  width: 90vw;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}